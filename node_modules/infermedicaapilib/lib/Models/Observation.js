
/**
 * InfermedicaAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/11/2017
 */
var BaseModel = require("./BaseModel");
/**
 * Creates an instance of Observation
 *
 * @constructor
 */
Observation = function (obj) {
    if(!obj) {
        this.id = null;     
        this.name = null;     
        this.sexFilter = null;     
        this.category = null;     
        this.children = null;     
        this.parentId = null;     
        this.parentRelationType = null;     
        this.validFor = null;     
        //Append to variable dictionary
        this._variableDict['sexFilter'] = 'sex_filter';
        this._variableDict['parentId'] = 'parent_id';
        this._variableDict['parentRelationType'] = 'parent_relation_type';
        this._variableDict['validFor'] = 'valid_for';
    } else {
        this.id = (obj.id !== undefined && obj.id !== null)? obj.id : null;
        this.name = (obj.name !== undefined && obj.name !== null)? obj.name : null;
        this.sexFilter = (obj.sex_filter !== undefined && obj.sex_filter !== null)? obj.sex_filter : null;
        this.category = (obj.category !== undefined && obj.category !== null)? obj.category : null;
        this.children = (obj.children !== undefined && obj.children !== null)? obj.children : null;
        this.parentId = (obj.parent_id !== undefined && obj.parent_id !== null)? obj.parent_id : null;
        this.parentRelationType = (obj.parent_relation_type !== undefined && obj.parent_relation_type !== null)? obj.parent_relation_type : null;
        this.validFor = (obj.valid_for !== undefined && obj.valid_for !== null)? obj.valid_for : null;
        //Append to variable dictionary
        this._variableDict['sexFilter'] = 'sex_filter';
        this._variableDict['parentId'] = 'parent_id';
        this._variableDict['parentRelationType'] = 'parent_relation_type';
        this._variableDict['validFor'] = 'valid_for';
    }
};

Observation.prototype = new BaseModel();
Observation.prototype.constructor = Observation;

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
Observation.prototype.getId = function() {
    return this.id;
};

/**
 * Setter for Id
 * 
 * @param {string} value 
 */
Observation.prototype.setId = function(value) {
    this.id = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
Observation.prototype.getName = function() {
    return this.name;
};

/**
 * Setter for Name
 * 
 * @param {string} value 
 */
Observation.prototype.setName = function(value) {
    this.name = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {SexFilterEnum}
 */
Observation.prototype.getSexFilter = function() {
    return this.sexFilter;
};

/**
 * Setter for SexFilter
 * 
 * @param {SexFilterEnum} value 
 */
Observation.prototype.setSexFilter = function(value) {
    this.sexFilter = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string|null}
 */
Observation.prototype.getCategory = function() {
    return this.category;
};

/**
 * Setter for Category
 * 
 * @param {string|null} value 
 */
Observation.prototype.setCategory = function(value) {
    this.category = value;
};

/**
 * ids of child observations grouped by their relation with this observation
 *
 * @return {object|null}
 */
Observation.prototype.getChildren = function() {
    return this.children;
};

/**
 * Setter for Children
 * 
 * @param {object|null} value 
 */
Observation.prototype.setChildren = function(value) {
    this.children = value;
};

/**
 * id of parent observation
 *
 * @return {string|null}
 */
Observation.prototype.getParentId = function() {
    return this.parentId;
};

/**
 * Setter for ParentId
 * 
 * @param {string|null} value 
 */
Observation.prototype.setParentId = function(value) {
    this.parentId = value;
};

/**
 * type of relation with parent observation
 *
 * @return {object|null}
 */
Observation.prototype.getParentRelationType = function() {
    return this.parentRelationType;
};

/**
 * Setter for ParentRelationType
 * 
 * @param {object|null} value 
 */
Observation.prototype.setParentRelationType = function(value) {
    this.parentRelationType = value;
};

/**
 * number of days that this observation remains valid
 *
 * @return {int|null}
 */
Observation.prototype.getValidFor = function() {
    return this.validFor;
};

/**
 * Setter for ValidFor
 * 
 * @param {int|null} value 
 */
Observation.prototype.setValidFor = function(value) {
    this.validFor = value;
};


module.exports = Observation;
